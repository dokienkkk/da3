{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack:///./src/taskpane/taskpane.js?"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\n\n// Connect database lấy dữ liệu\n\n// // create the connection to database\n\nconst dataUser = [\n  {\n    \"id\": 11,\n    \"name\": \"Đỗ Công Kiền\",\n    \"age\": 18,\n    \"address\": \"trung quoc\",\n    \"quantity\": 1,\n    \"unit\": \"tấn\",\n    \"group\": \"1\"\n  },\n  {\n    \"id\": 12,\n    \"name\": \"Nguyễn Thanh Lâm\",\n    \"age\": 24,\n    \"address\": \"hà nội\",\n    \"quantity\": 2,\n    \"unit\": \"tấn\",\n    \"group\": \"1\"\n  },\n  {\n    \"id\": 13,\n    \"name\": \"Nguyễn Xuân Công\",\n    \"age\": 18,\n    \"address\": \"nam định\",\n    \"quantity\": 3,\n    \"unit\": \"tấn\",\n    \"group\": \"2\"\n  }\n]\n\n\n\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\n    document.getElementById(\"app-body\").style.display = \"flex\";\n    // Determine if the user's version of Office supports all the Office.js APIs that are used in the tutorial.\n    if (!Office.context.requirements.isSetSupported('ExcelApi', '1.7')) {\n      console.log('Sorry. The tutorial add-in uses Excel.js APIs that are not available in your version of Office.');\n    }\n\n\n    // Assign event handlers and other initialization logic.\n    document.getElementById(\"create-report\").onclick = createReport;\n\n    //clear table\n    document.getElementById(\"clear-table\").onclick = clearTable;\n\n    //connect database\n    document.getElementById('connect-database').onclick = connectDB;\n  }\n});\n\nasync function connectDB() {\n  await Excel.run(async (context) => {\n\n    //connect db\n    // const connection = mysql.createConnection({\n    //   host: 'localhost',\n    //   user: 'root',\n    //   database: 'da3'\n    // });\n\n    // (await connection).execute(\n    //   'SELECT * FROM `user` where `id` = ? ', [15],\n    //   (error, results, fields) => {\n    //     console.log(results)\n    //   }\n    // )\n    let results = \"kiền\"\n    const currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n    let test = currentWorksheet.getRange(\"C1\")\n    test.values = results\n\n    await context.sync();\n  })\n    .catch((error) => {\n      console.log(\"Error: \" + error);\n      if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n      }\n    });\n}\n\nasync function createReport() {\n  await Excel.run(async (context) => {\n    //lấy worksheet đang làm việc hiện tại\n    const currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n\n    //xóa đường grid lines\n    // currentWorksheet.showGridlines = false\n\n    //tên công ty\n    let nameCompanyRange = currentWorksheet.getRange(\"A1:B1\")\n    //quốc hiệu\n    let nationalNameRange = currentWorksheet.getRange(\"E1:H1\")\n    //tiêu ngữ\n    let crestRange = currentWorksheet.getRange(\"E2:H2\")\n    //tên báo cáo\n    let reportNameRange = currentWorksheet.getRange(\"B5:G6\")\n    //date\n    let dateRange = currentWorksheet.getRange(\"A2:C2\")\n\n    let date = new Date()\n    let dateValue = `Ngày ${date.getDate()} Tháng ${date.getMonth()} Năm ${date.getFullYear()}`\n\n\n\n    nationalNameRange.merge()\n    crestRange.merge()\n    nameCompanyRange.merge()\n    reportNameRange.merge()\n    dateRange.merge()\n\n    let nameCompany = currentWorksheet.getRange(\"A1\")\n    let nationalName = currentWorksheet.getRange(\"E1\")\n    let crest = currentWorksheet.getRange(\"E2\")\n    let reportName = currentWorksheet.getRange(\"B5\")\n\n\n    currentWorksheet.getRange(\"A2\").values = [[`${dateValue}`]]\n\n\n    nameCompany.values = [[\"Công ty Than VN\"]]\n    nationalName.values = [['Cộng hòa xã hội chủ nghĩa Việt Nam']]\n    crest.values = [['Độc lập - Tự do - Hạnh phúc']]\n    reportName.values = [['BÁO CÁO SẢN XUẤT HÀNG NGÀY']]\n\n\n    nationalName.format.horizontalAlignment = \"Center\"\n    crest.format.horizontalAlignment = \"Center\"\n    nameCompany.format.horizontalAlignment = \"Left\"\n    reportName.format.horizontalAlignment = \"Center\"\n    reportName.format.font.bold = true\n    reportName.format.font.size = 18\n\n\n    // nameCompany.format.autofitColumns()\n    // nameCompany.format.autofitRows()\n\n\n\n\n\n\n    //tạo bảng mới có header\n    const expensesTable = currentWorksheet.tables.add(\"B10:G10\", true /*hasHeaders*/);\n    expensesTable.name = \"Report\";\n    // TODO2: Queue commands to populate the table with data.\n    expensesTable.getHeaderRowRange().values =\n      [[\"STT\", \"Họ và tên\", \"Tổ sản xuất\", \"Sản lượng\", \"Đơn vị\", \"Ghi chú\"]];\n\n    for (let user of dataUser) {\n      expensesTable.rows.add(null /*add at the end*/, [\n        [`${user.id}`, `${user.name}`, `Tổ ${user.group}`, `${user.quantity}`, `${user.unit}`, ''],\n      ]);\n    }\n    // // TODO3: Queue commands to format the table.\n    // expensesTable.columns.getItemAt(3).getRange().numberFormat = [['\\u20AC#,##0.00']];\n    // expensesTable.getRange().format.autofitColumns();\n    // expensesTable.getRange().format.autofitRows();\n    // const [user, field] = await pool.execute('select * from user')\n\n    // console.log(user)\n    if (Office.context.requirements.isSetSupported(\"ExcelApi\", \"1.2\")) {\n      currentWorksheet.getUsedRange().format.autofitColumns();\n      currentWorksheet.getUsedRange().format.autofitRows();\n      currentWorksheet.getUsedRange().format.horizontalAlignment = \"Center\"\n    }\n\n    currentWorksheet.getRange(\"A2\").format.horizontalAlignment = \"Left\"\n    currentWorksheet.getRange(\"A2\").format.font.italic = true\n    await context.sync();\n  })\n    .catch((error) => {\n      console.log(\"Error: \" + error);\n      if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n      }\n    });\n}\n\n\nasync function clearTable() {\n  await Excel.run(async (context) => {\n\n    // TODO1: Queue table creation logic here.\n\n    //lấy worksheet đang làm việc hiện tại\n    const currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n\n    currentWorksheet.getRange().clear()\n    await context.sync();\n  })\n    .catch((error) => {\n      console.log(\"Error: \" + error);\n      if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n      }\n    });\n}"],"names":["dataUser","connectDB","Excel","run","context","workbook","worksheets","getActiveWorksheet","getRange","values","sync","catch","error","console","log","OfficeExtension","Error","JSON","stringify","debugInfo","createReport","currentWorksheet","nameCompanyRange","nationalNameRange","crestRange","reportNameRange","dateRange","date","Date","dateValue","getDate","getMonth","getFullYear","merge","nameCompany","nationalName","crest","reportName","format","horizontalAlignment","font","bold","size","expensesTable","tables","add","name","getHeaderRowRange","user","rows","id","group","quantity","unit","Office","requirements","isSetSupported","getUsedRange","autofitColumns","autofitRows","italic","clearTable","clear","onReady","info","host","HostType","document","getElementById","style","display","onclick"],"sourceRoot":""}